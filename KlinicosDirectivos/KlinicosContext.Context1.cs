

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace KlinicosDirectivos
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class Klinicos_BEntities : DbContext
{
    public Klinicos_BEntities()
        : base("name=Klinicos_BEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Atenciones> Atenciones { get; set; }

    public virtual DbSet<AtencionesEstados> AtencionesEstados { get; set; }

    public virtual DbSet<AtencionEstados> AtencionEstados { get; set; }

    public virtual DbSet<Evoluciones> Evoluciones { get; set; }

    public virtual DbSet<EvolucionesNOTA> EvolucionesNOTA { get; set; }

    public virtual DbSet<EvolucionesSM> EvolucionesSM { get; set; }

    public virtual DbSet<EvolucionesSOAP> EvolucionesSOAP { get; set; }

    public virtual DbSet<Observaciones> Observaciones { get; set; }

    public virtual DbSet<ProblemasSalud> ProblemasSalud { get; set; }

    public virtual DbSet<Especialidades> Especialidades { get; set; }

    public virtual DbSet<Establecimientos> Establecimientos { get; set; }

    public virtual DbSet<Practicas> Practicas { get; set; }

    public virtual DbSet<Profesionales> Profesionales { get; set; }

    public virtual DbSet<Vacunas> Vacunas { get; set; }

    public virtual DbSet<ProfesionalesDisponibles> ProfesionalesDisponibles { get; set; }

    public virtual DbSet<Sectores> Sectores { get; set; }

    public virtual DbSet<Turno> Turno { get; set; }

    public virtual DbSet<TurnosReserva> TurnosReserva { get; set; }

    public virtual DbSet<TurnoTurnoEstado> TurnoTurnoEstado { get; set; }

    public virtual DbSet<Paciente> Paciente { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<Usuarios> Usuarios { get; set; }

    public virtual DbSet<UsuariosSectores> UsuariosSectores { get; set; }


    public virtual ObjectResult<SP_OBTENER_SEMANAL_ATENCIONES_Result> SP_OBTENER_SEMANAL_ATENCIONES(string mes, string anio, Nullable<int> idSector, Nullable<int> idEstablecimiento)
    {

        var mesParameter = mes != null ?
            new ObjectParameter("mes", mes) :
            new ObjectParameter("mes", typeof(string));


        var anioParameter = anio != null ?
            new ObjectParameter("anio", anio) :
            new ObjectParameter("anio", typeof(string));


        var idSectorParameter = idSector.HasValue ?
            new ObjectParameter("idSector", idSector) :
            new ObjectParameter("idSector", typeof(int));


        var idEstablecimientoParameter = idEstablecimiento.HasValue ?
            new ObjectParameter("idEstablecimiento", idEstablecimiento) :
            new ObjectParameter("idEstablecimiento", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_SEMANAL_ATENCIONES_Result>("SP_OBTENER_SEMANAL_ATENCIONES", mesParameter, anioParameter, idSectorParameter, idEstablecimientoParameter);
    }


    public virtual ObjectResult<SP_OBTENER_SEMANAL_EVOLUCIONES_Result> SP_OBTENER_SEMANAL_EVOLUCIONES(string mes, string anio, Nullable<int> idSector, Nullable<int> idEstablecimiento)
    {

        var mesParameter = mes != null ?
            new ObjectParameter("mes", mes) :
            new ObjectParameter("mes", typeof(string));


        var anioParameter = anio != null ?
            new ObjectParameter("anio", anio) :
            new ObjectParameter("anio", typeof(string));


        var idSectorParameter = idSector.HasValue ?
            new ObjectParameter("idSector", idSector) :
            new ObjectParameter("idSector", typeof(int));


        var idEstablecimientoParameter = idEstablecimiento.HasValue ?
            new ObjectParameter("idEstablecimiento", idEstablecimiento) :
            new ObjectParameter("idEstablecimiento", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_SEMANAL_EVOLUCIONES_Result>("SP_OBTENER_SEMANAL_EVOLUCIONES", mesParameter, anioParameter, idSectorParameter, idEstablecimientoParameter);
    }

}

}

