//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KlinicosDirectivos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Klinicos_BEntities : DbContext
    {
        public Klinicos_BEntities()
            : base("name=Klinicos_BEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Atenciones> Atenciones { get; set; }
        public virtual DbSet<AtencionesEstados> AtencionesEstados { get; set; }
        public virtual DbSet<Evoluciones> Evoluciones { get; set; }
        public virtual DbSet<EvolucionesSM> EvolucionesSM { get; set; }
        public virtual DbSet<EvolucionesSOAP> EvolucionesSOAP { get; set; }
        public virtual DbSet<Especialidades> Especialidades { get; set; }
        public virtual DbSet<Profesionales> Profesionales { get; set; }
        public virtual DbSet<EspecialidadesDisponibles> EspecialidadesDisponibles { get; set; }
        public virtual DbSet<ProfesionalesDisponibles> ProfesionalesDisponibles { get; set; }
        public virtual DbSet<Reportes> Reportes { get; set; }
        public virtual DbSet<ReportesEspecialidades> ReportesEspecialidades { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<UsuariosSectores> UsuariosSectores { get; set; }
        public virtual DbSet<Establecimientos> Establecimientos { get; set; }
        public virtual DbSet<Sectores> Sectores { get; set; }
        public virtual DbSet<Turno> Turno { get; set; }
        public virtual DbSet<Turno_Historicos> Turno_Historicos { get; set; }
        public virtual DbSet<TurnosReserva> TurnosReserva { get; set; }
    
        public virtual ObjectResult<SP_OBTENER_SEMANAL_ATENCIONES_Result> SP_OBTENER_SEMANAL_ATENCIONES(string mes, string anio, Nullable<int> idSector, Nullable<int> idEstablecimiento)
        {
            var mesParameter = mes != null ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(string));
    
            var anioParameter = anio != null ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(string));
    
            var idSectorParameter = idSector.HasValue ?
                new ObjectParameter("idSector", idSector) :
                new ObjectParameter("idSector", typeof(int));
    
            var idEstablecimientoParameter = idEstablecimiento.HasValue ?
                new ObjectParameter("idEstablecimiento", idEstablecimiento) :
                new ObjectParameter("idEstablecimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_SEMANAL_ATENCIONES_Result>("SP_OBTENER_SEMANAL_ATENCIONES", mesParameter, anioParameter, idSectorParameter, idEstablecimientoParameter);
        }
    
        public virtual ObjectResult<SP_OBTENER_SEMANAL_EVOLUCIONES_Result> SP_OBTENER_SEMANAL_EVOLUCIONES(string mes, string anio, Nullable<int> idSector, Nullable<int> idEstablecimiento)
        {
            var mesParameter = mes != null ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(string));
    
            var anioParameter = anio != null ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(string));
    
            var idSectorParameter = idSector.HasValue ?
                new ObjectParameter("idSector", idSector) :
                new ObjectParameter("idSector", typeof(int));
    
            var idEstablecimientoParameter = idEstablecimiento.HasValue ?
                new ObjectParameter("idEstablecimiento", idEstablecimiento) :
                new ObjectParameter("idEstablecimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_SEMANAL_EVOLUCIONES_Result>("SP_OBTENER_SEMANAL_EVOLUCIONES", mesParameter, anioParameter, idSectorParameter, idEstablecimientoParameter);
        }
    
        public virtual ObjectResult<consultaPorEstablecimiento_Result> consultaPorEstablecimiento(Nullable<int> idestablecimiento)
        {
            var idestablecimientoParameter = idestablecimiento.HasValue ?
                new ObjectParameter("idestablecimiento", idestablecimiento) :
                new ObjectParameter("idestablecimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultaPorEstablecimiento_Result>("consultaPorEstablecimiento", idestablecimientoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Insertar_Profesional(string contactoObsevaciones, string email, Nullable<System.DateTime> fechaCrea, Nullable<System.DateTime> fechaModi, Nullable<int> idSexo, Nullable<int> idTipoDocumento, string matricula, string numeroDocumento, string primerApellido, string primerNombre, string telefono, string tipoTelefono, string usuarioCrea, string usuarioModi, Nullable<bool> vigente)
        {
            var contactoObsevacionesParameter = contactoObsevaciones != null ?
                new ObjectParameter("contactoObsevaciones", contactoObsevaciones) :
                new ObjectParameter("contactoObsevaciones", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var fechaCreaParameter = fechaCrea.HasValue ?
                new ObjectParameter("fechaCrea", fechaCrea) :
                new ObjectParameter("fechaCrea", typeof(System.DateTime));
    
            var fechaModiParameter = fechaModi.HasValue ?
                new ObjectParameter("fechaModi", fechaModi) :
                new ObjectParameter("fechaModi", typeof(System.DateTime));
    
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("idSexo", idSexo) :
                new ObjectParameter("idSexo", typeof(int));
    
            var idTipoDocumentoParameter = idTipoDocumento.HasValue ?
                new ObjectParameter("idTipoDocumento", idTipoDocumento) :
                new ObjectParameter("idTipoDocumento", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var numeroDocumentoParameter = numeroDocumento != null ?
                new ObjectParameter("numeroDocumento", numeroDocumento) :
                new ObjectParameter("numeroDocumento", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("primerNombre", primerNombre) :
                new ObjectParameter("primerNombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var tipoTelefonoParameter = tipoTelefono != null ?
                new ObjectParameter("tipoTelefono", tipoTelefono) :
                new ObjectParameter("tipoTelefono", typeof(string));
    
            var usuarioCreaParameter = usuarioCrea != null ?
                new ObjectParameter("usuarioCrea", usuarioCrea) :
                new ObjectParameter("usuarioCrea", typeof(string));
    
            var usuarioModiParameter = usuarioModi != null ?
                new ObjectParameter("usuarioModi", usuarioModi) :
                new ObjectParameter("usuarioModi", typeof(string));
    
            var vigenteParameter = vigente.HasValue ?
                new ObjectParameter("vigente", vigente) :
                new ObjectParameter("vigente", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insertar_Profesional", contactoObsevacionesParameter, emailParameter, fechaCreaParameter, fechaModiParameter, idSexoParameter, idTipoDocumentoParameter, matriculaParameter, numeroDocumentoParameter, primerApellidoParameter, primerNombreParameter, telefonoParameter, tipoTelefonoParameter, usuarioCreaParameter, usuarioModiParameter, vigenteParameter);
        }
    
        public virtual int SP_Insertar_Profesional_Especialidad(Nullable<int> idProfesional, Nullable<int> idEspecialidad)
        {
            var idProfesionalParameter = idProfesional.HasValue ?
                new ObjectParameter("idProfesional", idProfesional) :
                new ObjectParameter("idProfesional", typeof(int));
    
            var idEspecialidadParameter = idEspecialidad.HasValue ?
                new ObjectParameter("idEspecialidad", idEspecialidad) :
                new ObjectParameter("idEspecialidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insertar_Profesional_Especialidad", idProfesionalParameter, idEspecialidadParameter);
        }
    
        public virtual ObjectResult<SP_OBTENER_ESPECIALIDADES_Result> SP_OBTENER_ESPECIALIDADES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_ESPECIALIDADES_Result>("SP_OBTENER_ESPECIALIDADES");
        }
    
        public virtual ObjectResult<SP_OBTENER_PROFESIONALES_Result> SP_OBTENER_PROFESIONALES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_PROFESIONALES_Result>("SP_OBTENER_PROFESIONALES");
        }
    
        public virtual ObjectResult<SP_OBTENER_SEMANAL_Result> SP_OBTENER_SEMANAL(string mes, string anio, Nullable<int> idSector, Nullable<int> idEstablecimiento)
        {
            var mesParameter = mes != null ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(string));
    
            var anioParameter = anio != null ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(string));
    
            var idSectorParameter = idSector.HasValue ?
                new ObjectParameter("idSector", idSector) :
                new ObjectParameter("idSector", typeof(int));
    
            var idEstablecimientoParameter = idEstablecimiento.HasValue ?
                new ObjectParameter("idEstablecimiento", idEstablecimiento) :
                new ObjectParameter("idEstablecimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OBTENER_SEMANAL_Result>("SP_OBTENER_SEMANAL", mesParameter, anioParameter, idSectorParameter, idEstablecimientoParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_TOTAL_EVOLUCIONES(Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("fechaDesde", fechaDesde) :
                new ObjectParameter("fechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("fechaHasta", fechaHasta) :
                new ObjectParameter("fechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_TOTAL_EVOLUCIONES", fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_TOTAL_MEDICOS_ACTIVOS(Nullable<System.DateTime> fechaDesde)
        {
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("fechaDesde", fechaDesde) :
                new ObjectParameter("fechaDesde", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_TOTAL_MEDICOS_ACTIVOS", fechaDesdeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_TOTAL_PRACTICAS(Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("fechaDesde", fechaDesde) :
                new ObjectParameter("fechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("fechaHasta", fechaHasta) :
                new ObjectParameter("fechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_TOTAL_PRACTICAS", fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_TOTAL_PROFESIONALES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_TOTAL_PROFESIONALES");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("Klinicos_BEntities", "split")]
        public virtual IQueryable<split_Result> split(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<split_Result>("[Klinicos_BEntities].[split](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Especialidades> SP_ESPECIALIDADES_X_PROFESIONAL(Nullable<int> idProfesional)
        {
            var idProfesionalParameter = idProfesional.HasValue ?
                new ObjectParameter("idProfesional", idProfesional) :
                new ObjectParameter("idProfesional", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Especialidades>("SP_ESPECIALIDADES_X_PROFESIONAL", idProfesionalParameter);
        }
    
        public virtual ObjectResult<Especialidades> SP_ESPECIALIDADES_X_PROFESIONAL(Nullable<int> idProfesional, MergeOption mergeOption)
        {
            var idProfesionalParameter = idProfesional.HasValue ?
                new ObjectParameter("idProfesional", idProfesional) :
                new ObjectParameter("idProfesional", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Especialidades>("SP_ESPECIALIDADES_X_PROFESIONAL", mergeOption, idProfesionalParameter);
        }
    }
}
